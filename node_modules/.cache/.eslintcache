[{"/Users/mac/Desktop/Projects/starlink/src/index.js":"1","/Users/mac/Desktop/Projects/starlink/src/reportWebVitals.js":"2","/Users/mac/Desktop/Projects/starlink/src/components/App.js":"3","/Users/mac/Desktop/Projects/starlink/src/components/Main.js":"4","/Users/mac/Desktop/Projects/starlink/src/components/Footer.js":"5","/Users/mac/Desktop/Projects/starlink/src/components/Header.js":"6","/Users/mac/Desktop/Projects/starlink/src/constants.js":"7","/Users/mac/Desktop/Projects/starlink/src/components/SatelliteList.js":"8","/Users/mac/Desktop/Projects/starlink/src/components/WorldMap.js":"9","/Users/mac/Desktop/Projects/starlink/src/components/SatSetting.js":"10"},{"size":546,"mtime":1664659507592,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1664658768192,"results":"13","hashOfConfig":"12"},{"size":259,"mtime":1664662944709,"results":"14","hashOfConfig":"12"},{"size":2279,"mtime":1665109684711,"results":"15","hashOfConfig":"12"},{"size":299,"mtime":1664661161907,"results":"16","hashOfConfig":"12"},{"size":445,"mtime":1664750759608,"results":"17","hashOfConfig":"12"},{"size":372,"mtime":1665253975242,"results":"18","hashOfConfig":"12"},{"size":2661,"mtime":1664936976854,"results":"19","hashOfConfig":"12"},{"size":5777,"mtime":1665111342197,"results":"20","hashOfConfig":"12"},{"size":3873,"mtime":1664750209603,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"46jsb9",{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"25"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"/Users/mac/Desktop/Projects/starlink/src/index.js",[],[],[],"/Users/mac/Desktop/Projects/starlink/src/reportWebVitals.js",[],[],"/Users/mac/Desktop/Projects/starlink/src/components/App.js",[],[],"/Users/mac/Desktop/Projects/starlink/src/components/Main.js",[],[],"/Users/mac/Desktop/Projects/starlink/src/components/Footer.js",[],[],"/Users/mac/Desktop/Projects/starlink/src/components/Header.js",[],[],"/Users/mac/Desktop/Projects/starlink/src/constants.js",[],[],"/Users/mac/Desktop/Projects/starlink/src/components/SatelliteList.js",[],[],"/Users/mac/Desktop/Projects/starlink/src/components/WorldMap.js",["54","55","56"],[],"import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { Spin } from \"antd\";\nimport { feature } from \"topojson-client\";\nimport { geoKavrayskiy7 } from \"d3-geo-projection\";\nimport { geoGraticule, geoPath } from \"d3-geo\";\nimport { select as d3Select } from \"d3-selection\";\nimport { schemeCategory10 } from \"d3-scale-chromatic\";\nimport * as d3Scale from \"d3-scale\";\nimport { timeFormat as d3TimeFormat } from \"d3-time-format\";\n\nimport {\n  WORLD_MAP_URL,\n  SATELLITE_POSITION_URL,\n  SAT_API_KEY\n} from \"../constants\";\n\nconst width = 960;\nconst height = 600;\n\nclass WorldMap extends Component {\n  constructor() {\n    super();\n    this.state = {\n      isLoading: false,\n      isDrawing: false\n    };\n    this.map = null;\n    this.color = d3Scale.scaleOrdinal(schemeCategory10);\n    this.refMap = React.createRef();\n    this.refTrack = React.createRef();\n  }\n\n  componentDidMount() {\n    axios\n      .get(WORLD_MAP_URL)\n      .then(res => {\n        const { data } = res;\n        const land = feature(data, data.objects.countries).features;\n        this.generateMap(land);\n      })\n      .catch(e => {\n        console.log(\"err in fetch map data \", e.message);\n      });\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (prevProps.satData !== this.props.satData) {\n      const {\n        latitude,\n        longitude,\n        elevation,\n        altitude,\n        duration\n      } = this.props.observerData;\n      const endTime = duration * 60;\n\n      this.setState({\n        isLoading: true\n      });\n\n      const urls = this.props.satData.map(sat => {\n        const { satid } = sat;\n        const url = `/api/${SATELLITE_POSITION_URL}/${satid}/${latitude}/${longitude}/${elevation}/${endTime}/&apiKey=${SAT_API_KEY}`;\n\n        return axios.get(url);\n      });\n\n      Promise.all(urls)\n        .then(res => {\n          const arr = res.map(sat => sat.data);\n          this.setState({\n            isLoading: false,\n            isDrawing: true\n          });\n\n          if (!prevState.isDrawing) {\n            this.track(arr);\n          } else {\n            const oHint = document.getElementsByClassName(\"hint\")[0];\n            oHint.innerHTML =\n              \"Please wait for these satellite animation to finish before selection new ones!\";\n          }\n        })\n        .catch(e => {\n          console.log(\"err in fetch satellite position -> \", e.message);\n        });\n    }\n  }\n  track = data => {\n    if (!data[0].hasOwnProperty(\"positions\")) {\n      throw new Error(\"no position data\");\n      return;\n    }\n\n    const len = data[0].positions.length;\n    const { duration } = this.props.observerData;\n    const { context2 } = this.map;\n\n    let now = new Date();\n\n    let i = 0;\n\n    let timer = setInterval(() => {\n      let ct = new Date();\n\n      let timePassed = i === 0 ? 0 : ct - now;\n      let time = new Date(now.getTime() + 60 * timePassed);\n\n      context2.clearRect(0, 0, width, height);\n\n      context2.font = \"bold 14px sans-serif\";\n      context2.fillStyle = \"#333\";\n      context2.textAlign = \"center\";\n      context2.fillText(d3TimeFormat(time), width / 2, 10);\n\n      if (i >= len) {\n        clearInterval(timer);\n        this.setState({ isDrawing: false });\n        const oHint = document.getElementsByClassName(\"hint\")[0];\n        oHint.innerHTML = \"\";\n        return;\n      }\n\n      data.forEach(sat => {\n        const { info, positions } = sat;\n        this.drawSat(info, positions[i]);\n      });\n\n      i += 60;\n    }, 1000);\n  };\n\n  drawSat = (sat, pos) => {\n    const { satlongitude, satlatitude } = pos;\n\n    if (!satlongitude || !satlatitude) return;\n\n    const { satname } = sat;\n    const nameWithNumber = satname.match(/\\d+/g).join(\"\");\n\n    const { projection, context2 } = this.map;\n    const xy = projection([satlongitude, satlatitude]);\n\n    context2.fillStyle = this.color(nameWithNumber);\n    context2.beginPath();\n    context2.arc(xy[0], xy[1], 4, 0, 2 * Math.PI);\n    context2.fill();\n\n    context2.font = \"bold 11px sans-serif\";\n    context2.textAlign = \"center\";\n    context2.fillText(nameWithNumber, xy[0], xy[1] + 14);\n  };\n\n  render() {\n    const { isLoading } = this.state;\n    return (\n      <div className=\"map-box\">\n        {isLoading ? (\n          <div className=\"spinner\">\n            <Spin tip=\"Loading...\" size=\"large\" />\n          </div>\n        ) : null}\n        <canvas className=\"map\" ref={this.refMap} />\n        <canvas className=\"track\" ref={this.refTrack} />\n        <div className=\"hint\" />\n      </div>\n    );\n  }\n\n  generateMap = land => {\n    const projection = geoKavrayskiy7()\n      .scale(170)\n      .translate([width / 2, height / 2])\n      .precision(0.1);\n\n    const graticule = geoGraticule();\n\n    const canvas = d3Select(this.refMap.current)\n      .attr(\"width\", width)\n      .attr(\"height\", height);\n\n    const canvas2 = d3Select(this.refTrack.current)\n      .attr(\"width\", width)\n      .attr(\"height\", height);\n\n    const context = canvas.node().getContext(\"2d\");\n    const context2 = canvas2.node().getContext(\"2d\");\n\n    let path = geoPath()\n      .projection(projection)\n      .context(context);\n\n    land.forEach(ele => {\n      context.fillStyle = \"#B3DDEF\";\n      context.strokeStyle = \"#000\";\n      context.globalAlpha = 0.7;\n      context.beginPath();\n      path(ele);\n      context.fill();\n      context.stroke();\n\n      context.strokeStyle = \"rgba(220, 220, 220, 0.1)\";\n      context.beginPath();\n      path(graticule());\n      context.lineWidth = 0.1;\n      context.stroke();\n\n      context.beginPath();\n      context.lineWidth = 0.5;\n      path(graticule.outline());\n      context.stroke();\n    });\n\n    this.map = {\n      projection: projection,\n      graticule: graticule,\n      context: context,\n      context2: context2\n    };\n  };\n}\n\nexport default WorldMap;\n","/Users/mac/Desktop/Projects/starlink/src/components/SatSetting.js",[],[],{"ruleId":"57","severity":1,"message":"58","line":53,"column":9,"nodeType":"59","messageId":"60","endLine":53,"endColumn":17},{"ruleId":"61","severity":1,"message":"62","line":93,"column":7,"nodeType":"63","messageId":"64","endLine":93,"endColumn":14},{"ruleId":"57","severity":1,"message":"65","line":97,"column":13,"nodeType":"59","messageId":"60","endLine":97,"endColumn":21},"no-unused-vars","'altitude' is assigned a value but never used.","Identifier","unusedVar","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","'duration' is assigned a value but never used."]