{"ast":null,"code":"var _jsxFileName = \"/Users/mac/starlink/src/components/WorldMap.js\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { Spin } from \"antd\";\nimport { feature } from \"topojson-client\";\nimport { geoKavrayskiy7 } from \"d3-geo-projection\";\nimport { geoGraticule, geoPath } from \"d3-geo\";\nimport { select as d3Select } from \"d3-selection\";\nimport { schemeCategory10 } from \"d3-scale-chromatic\";\nimport * as d3Scale from \"d3-scale\";\nimport { timeFormat as d3TimeFormat } from \"d3-time-format\";\nimport { WORLD_MAP_URL, SATELLITE_POSITION_URL, SAT_API_KEY } from \"../constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst width = 960;\nconst height = 600;\n\nclass WorldMap extends Component {\n  constructor() {\n    super();\n\n    this.track = data => {\n      if (!data[0].hasOwnProperty(\"positions\")) {\n        throw new Error(\"no position data\");\n        return;\n      }\n\n      const len = data[0].positions.length;\n      const {\n        duration\n      } = this.props.observerData;\n      const {\n        context2\n      } = this.map;\n      let now = new Date();\n      let i = 0;\n      let timer = setInterval(() => {\n        let ct = new Date();\n        let timePassed = i === 0 ? 0 : ct - now;\n        let time = new Date(now.getTime() + 60 * timePassed);\n        context2.clearRect(0, 0, width, height);\n        context2.font = \"bold 14px sans-serif\";\n        context2.fillStyle = \"#333\";\n        context2.textAlign = \"center\";\n        context2.fillText(d3TimeFormat(time), width / 2, 10);\n\n        if (i >= len) {\n          clearInterval(timer);\n          this.setState({\n            isDrawing: false\n          });\n          const oHint = document.getElementsByClassName(\"hint\")[0];\n          oHint.innerHTML = \"\";\n          return;\n        }\n\n        data.forEach(sat => {\n          const {\n            info,\n            positions\n          } = sat;\n          this.drawSat(info, positions[i]);\n        });\n        i += 60;\n      }, 1000);\n    };\n\n    this.drawSat = (sat, pos) => {\n      const {\n        satlongitude,\n        satlatitude\n      } = pos;\n      if (!satlongitude || !satlatitude) return;\n      const {\n        satname\n      } = sat;\n      const nameWithNumber = satname.match(/\\d+/g).join(\"\");\n      const {\n        projection,\n        context2\n      } = this.map;\n      const xy = projection([satlongitude, satlatitude]);\n      context2.fillStyle = this.color(nameWithNumber);\n      context2.beginPath();\n      context2.arc(xy[0], xy[1], 4, 0, 2 * Math.PI);\n      context2.fill();\n      context2.font = \"bold 11px sans-serif\";\n      context2.textAlign = \"center\";\n      context2.fillText(nameWithNumber, xy[0], xy[1] + 14);\n    };\n\n    this.generateMap = land => {\n      const projection = geoKavrayskiy7().scale(170).translate([width / 2, height / 2]).precision(0.1);\n      const graticule = geoGraticule();\n      const canvas = d3Select(this.refMap.current).attr(\"width\", width).attr(\"height\", height);\n      const canvas2 = d3Select(this.refTrack.current).attr(\"width\", width).attr(\"height\", height);\n      const context = canvas.node().getContext(\"2d\");\n      const context2 = canvas2.node().getContext(\"2d\");\n      let path = geoPath().projection(projection).context(context);\n      land.forEach(ele => {\n        context.fillStyle = \"#B3DDEF\";\n        context.strokeStyle = \"#000\";\n        context.globalAlpha = 0.7;\n        context.beginPath();\n        path(ele);\n        context.fill();\n        context.stroke();\n        context.strokeStyle = \"rgba(220, 220, 220, 0.1)\";\n        context.beginPath();\n        path(graticule());\n        context.lineWidth = 0.1;\n        context.stroke();\n        context.beginPath();\n        context.lineWidth = 0.5;\n        path(graticule.outline());\n        context.stroke();\n      });\n      this.map = {\n        projection: projection,\n        graticule: graticule,\n        context: context,\n        context2: context2\n      };\n    };\n\n    this.state = {\n      isLoading: false,\n      isDrawing: false\n    };\n    this.map = null;\n    this.color = d3Scale.scaleOrdinal(schemeCategory10);\n    this.refMap = /*#__PURE__*/React.createRef();\n    this.refTrack = /*#__PURE__*/React.createRef();\n  }\n\n  componentDidMount() {\n    axios.get(WORLD_MAP_URL).then(res => {\n      const {\n        data\n      } = res;\n      const land = feature(data, data.objects.countries).features;\n      this.generateMap(land);\n    }).catch(e => {\n      console.log(\"err in fetch map data \", e.message);\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (prevProps.satData !== this.props.satData) {\n      const {\n        latitude,\n        longitude,\n        elevation,\n        altitude,\n        duration\n      } = this.props.observerData;\n      const endTime = duration * 60;\n      this.setState({\n        isLoading: true\n      });\n      const urls = this.props.satData.map(sat => {\n        const {\n          satid\n        } = sat;\n        const url = `/api/${SATELLITE_POSITION_URL}/${satid}/${latitude}/${longitude}/${elevation}/${endTime}/&apiKey=${SAT_API_KEY}`;\n        return axios.get(url);\n      });\n      Promise.all(urls).then(res => {\n        const arr = res.map(sat => sat.data);\n        this.setState({\n          isLoading: false,\n          isDrawing: true\n        });\n\n        if (!prevState.isDrawing) {\n          this.track(arr);\n        } else {\n          const oHint = document.getElementsByClassName(\"hint\")[0];\n          oHint.innerHTML = \"Please wait for these satellite animation to finish before selection new ones!\";\n        }\n      }).catch(e => {\n        console.log(\"err in fetch satellite position -> \", e.message);\n      });\n    }\n  }\n\n  render() {\n    const {\n      isLoading\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-box\",\n      children: [isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spinner\",\n        children: /*#__PURE__*/_jsxDEV(Spin, {\n          tip: \"Loading...\",\n          size: \"large\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 11\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"canvas\", {\n        className: \"map\",\n        ref: this.refMap\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        className: \"track\",\n        ref: this.refTrack\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"hint\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default WorldMap;","map":{"version":3,"names":["React","Component","axios","Spin","feature","geoKavrayskiy7","geoGraticule","geoPath","select","d3Select","schemeCategory10","d3Scale","timeFormat","d3TimeFormat","WORLD_MAP_URL","SATELLITE_POSITION_URL","SAT_API_KEY","width","height","WorldMap","constructor","track","data","hasOwnProperty","Error","len","positions","length","duration","props","observerData","context2","map","now","Date","i","timer","setInterval","ct","timePassed","time","getTime","clearRect","font","fillStyle","textAlign","fillText","clearInterval","setState","isDrawing","oHint","document","getElementsByClassName","innerHTML","forEach","sat","info","drawSat","pos","satlongitude","satlatitude","satname","nameWithNumber","match","join","projection","xy","color","beginPath","arc","Math","PI","fill","generateMap","land","scale","translate","precision","graticule","canvas","refMap","current","attr","canvas2","refTrack","context","node","getContext","path","ele","strokeStyle","globalAlpha","stroke","lineWidth","outline","state","isLoading","scaleOrdinal","createRef","componentDidMount","get","then","res","objects","countries","features","catch","e","console","log","message","componentDidUpdate","prevProps","prevState","snapshot","satData","latitude","longitude","elevation","altitude","endTime","urls","satid","url","Promise","all","arr","render"],"sources":["/Users/mac/starlink/src/components/WorldMap.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { Spin } from \"antd\";\nimport { feature } from \"topojson-client\";\nimport { geoKavrayskiy7 } from \"d3-geo-projection\";\nimport { geoGraticule, geoPath } from \"d3-geo\";\nimport { select as d3Select } from \"d3-selection\";\nimport { schemeCategory10 } from \"d3-scale-chromatic\";\nimport * as d3Scale from \"d3-scale\";\nimport { timeFormat as d3TimeFormat } from \"d3-time-format\";\n\nimport {\n  WORLD_MAP_URL,\n  SATELLITE_POSITION_URL,\n  SAT_API_KEY\n} from \"../constants\";\n\nconst width = 960;\nconst height = 600;\n\nclass WorldMap extends Component {\n  constructor() {\n    super();\n    this.state = {\n      isLoading: false,\n      isDrawing: false\n    };\n    this.map = null;\n    this.color = d3Scale.scaleOrdinal(schemeCategory10);\n    this.refMap = React.createRef();\n    this.refTrack = React.createRef();\n  }\n\n  componentDidMount() {\n    axios\n      .get(WORLD_MAP_URL)\n      .then(res => {\n        const { data } = res;\n        const land = feature(data, data.objects.countries).features;\n        this.generateMap(land);\n      })\n      .catch(e => {\n        console.log(\"err in fetch map data \", e.message);\n      });\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (prevProps.satData !== this.props.satData) {\n      const {\n        latitude,\n        longitude,\n        elevation,\n        altitude,\n        duration\n      } = this.props.observerData;\n      const endTime = duration * 60;\n\n      this.setState({\n        isLoading: true\n      });\n\n      const urls = this.props.satData.map(sat => {\n        const { satid } = sat;\n        const url = `/api/${SATELLITE_POSITION_URL}/${satid}/${latitude}/${longitude}/${elevation}/${endTime}/&apiKey=${SAT_API_KEY}`;\n\n        return axios.get(url);\n      });\n\n      Promise.all(urls)\n        .then(res => {\n          const arr = res.map(sat => sat.data);\n          this.setState({\n            isLoading: false,\n            isDrawing: true\n          });\n\n          if (!prevState.isDrawing) {\n            this.track(arr);\n          } else {\n            const oHint = document.getElementsByClassName(\"hint\")[0];\n            oHint.innerHTML =\n              \"Please wait for these satellite animation to finish before selection new ones!\";\n          }\n        })\n        .catch(e => {\n          console.log(\"err in fetch satellite position -> \", e.message);\n        });\n    }\n  }\n  track = data => {\n    if (!data[0].hasOwnProperty(\"positions\")) {\n      throw new Error(\"no position data\");\n      return;\n    }\n\n    const len = data[0].positions.length;\n    const { duration } = this.props.observerData;\n    const { context2 } = this.map;\n\n    let now = new Date();\n\n    let i = 0;\n\n    let timer = setInterval(() => {\n      let ct = new Date();\n\n      let timePassed = i === 0 ? 0 : ct - now;\n      let time = new Date(now.getTime() + 60 * timePassed);\n\n      context2.clearRect(0, 0, width, height);\n\n      context2.font = \"bold 14px sans-serif\";\n      context2.fillStyle = \"#333\";\n      context2.textAlign = \"center\";\n      context2.fillText(d3TimeFormat(time), width / 2, 10);\n\n      if (i >= len) {\n        clearInterval(timer);\n        this.setState({ isDrawing: false });\n        const oHint = document.getElementsByClassName(\"hint\")[0];\n        oHint.innerHTML = \"\";\n        return;\n      }\n\n      data.forEach(sat => {\n        const { info, positions } = sat;\n        this.drawSat(info, positions[i]);\n      });\n\n      i += 60;\n    }, 1000);\n  };\n\n  drawSat = (sat, pos) => {\n    const { satlongitude, satlatitude } = pos;\n\n    if (!satlongitude || !satlatitude) return;\n\n    const { satname } = sat;\n    const nameWithNumber = satname.match(/\\d+/g).join(\"\");\n\n    const { projection, context2 } = this.map;\n    const xy = projection([satlongitude, satlatitude]);\n\n    context2.fillStyle = this.color(nameWithNumber);\n    context2.beginPath();\n    context2.arc(xy[0], xy[1], 4, 0, 2 * Math.PI);\n    context2.fill();\n\n    context2.font = \"bold 11px sans-serif\";\n    context2.textAlign = \"center\";\n    context2.fillText(nameWithNumber, xy[0], xy[1] + 14);\n  };\n\n  render() {\n    const { isLoading } = this.state;\n    return (\n      <div className=\"map-box\">\n        {isLoading ? (\n          <div className=\"spinner\">\n            <Spin tip=\"Loading...\" size=\"large\" />\n          </div>\n        ) : null}\n        <canvas className=\"map\" ref={this.refMap} />\n        <canvas className=\"track\" ref={this.refTrack} />\n        <div className=\"hint\" />\n      </div>\n    );\n  }\n\n  generateMap = land => {\n    const projection = geoKavrayskiy7()\n      .scale(170)\n      .translate([width / 2, height / 2])\n      .precision(0.1);\n\n    const graticule = geoGraticule();\n\n    const canvas = d3Select(this.refMap.current)\n      .attr(\"width\", width)\n      .attr(\"height\", height);\n\n    const canvas2 = d3Select(this.refTrack.current)\n      .attr(\"width\", width)\n      .attr(\"height\", height);\n\n    const context = canvas.node().getContext(\"2d\");\n    const context2 = canvas2.node().getContext(\"2d\");\n\n    let path = geoPath()\n      .projection(projection)\n      .context(context);\n\n    land.forEach(ele => {\n      context.fillStyle = \"#B3DDEF\";\n      context.strokeStyle = \"#000\";\n      context.globalAlpha = 0.7;\n      context.beginPath();\n      path(ele);\n      context.fill();\n      context.stroke();\n\n      context.strokeStyle = \"rgba(220, 220, 220, 0.1)\";\n      context.beginPath();\n      path(graticule());\n      context.lineWidth = 0.1;\n      context.stroke();\n\n      context.beginPath();\n      context.lineWidth = 0.5;\n      path(graticule.outline());\n      context.stroke();\n    });\n\n    this.map = {\n      projection: projection,\n      graticule: graticule,\n      context: context,\n      context2: context2\n    };\n  };\n}\n\nexport default WorldMap;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}